var hiddenBlock = document.querySelectorAll(".hidden-block");
	hiddenBlock.forEach(function(item) {
  	  item.closest('.vert').style.display = 'none';
	});

function toggleImage(){
  	document.querySelector('#hidden-container').classList.toggle('hidden');
	}

var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
	this.classList.toggle("active");
	var panel = this.nextElementSibling;
	if (panel.style.display === "block") {
  	panel.style.display = "none";
	} else {
  	panel.style.display = "block";
	}
  });
}

$(function(){
  $('.minimized').click(function(event) {
	var i_path = $(this).attr('src');
	$('body').append('<div id="overlay"></div><div id="magnify"><img src="'+i_path+'"><div id="close-popup"><i></i></div></div>');
	$('#magnify').css({
 	left: ($(document).width() - $('#magnify').outerWidth())/2,
 	// top: ($(document).height() - $('#magnify').outerHeight())/2 upd: 24.10.2016
        	top: ($(window).height() - $('#magnify').outerHeight())/2
   });
	$('#overlay, #magnify').fadeIn('fast');
  });
 
  $('body').on('click', '#close-popup, #overlay', function(event) {
	event.preventDefault();
	$('#overlay, #magnify').fadeOut('fast', function() {
  	$('#close-popup, #magnify, #overlay').remove();
	});
  });
});

function openTab(evt, TabName) {
  var targetLink = evt.currentTarget;
  flipClassWithinOneBlock(targetLink, "active")

  var targetTab = document.getElementById(TabName);
  flipClassWithinOneBlock(targetTab, "activeTab")
}

function flipClassWithinOneBlock(target, className) {
    var current = target.parentNode.getElementsByClassName(className);
    for (let item of current) {
      item.classList.remove(className);
  }
  target.classList.add(className);
}

function openTab(evt, TabName) {
  var targetLink = evt.currentTarget;
  flipClassWithinOneBlock(targetLink, "active")

  var targetTab = document.getElementById(TabName);
  flipClassWithinOneBlock(targetTab, "activeTab")
}

function flipClassWithinOneBlock(target, className) {
    var current = target.parentNode.getElementsByClassName(className);
    for (let item of current) {
      item.classList.remove(className);
  }
  target.classList.add(className);
}